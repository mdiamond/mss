/*
 * Matthew Diamond 2015
 * The header for a base class to represent a generic synthesizer module. Other
 * classes will extend this class and represent different types of modules.
 * The following classes are derived from the Module class:
 *   - ADSR
 *   - Delay
 *   - Filter
 *   - Mixer
 *   - Multiplier
 *   - Noise
 *   - Oscillator
 *   - Output
 */

#ifndef MSS_MODULE_HPP
#define MSS_MODULE_HPP

/************
 * INCLUDES *
 ************/

// Included libraries
#include <map>

// Included SDL components
#include "SDL.h"
#include "SDL_ttf.h"

// Included graphics classes
#include "Graphics_Listener.hpp"
#include "Graphics_Object.hpp"
#include "Graphics_Objects/Button.hpp"
#include "Graphics_Objects/Input_Text_Box.hpp"
#include "Graphics_Objects/Input_Toggle_Button.hpp"
#include "Graphics_Objects/Rect.hpp"
#include "Graphics_Objects/Text.hpp"
#include "Graphics_Objects/Waveform.hpp"

class Module: public Graphics_Object, public Graphics_Listener
{
public:
    // Module type enum
    enum ModuleType
    {
        ADSR = 0,
        DELAY,
        FILTER,
        MIXER,
        MULTIPLIER,
        NOISE,
        OSCILLATOR,
        OUTPUT,
        SAH
    };

    // A struct to represent a parameter for a module
    struct Parameter
    {
        // Parameter value
        float val;
        // Module that is generating values for this parameter
        Module *from;
        // Output buffer of the from module
        std::vector<float> *in;
        // Whether or not this parameter is currently being updated with values
        // generated by the from module
        bool live;
    };

    // Maps of useful information about modules, defined in Module.cpp
    //   Map of the names per module type
    static const std::map<ModuleType, std::string> module_names;
    //   Map of the parameters per module type
    static const std::map<ModuleType, std::vector<std::string> > parameter_names;

    // Module information
    ModuleType module_type;
    SDL_Color primary_module_color;
    SDL_Color secondary_module_color;
    int number;
    bool processed;
    SDL_Point upper_left;
    bool graphics_objects_initialized;
    // A vector containing any graphics objects necessary for rendering this
    // module, and their current locations
    std::map<std::string, SDL_Rect> graphics_object_locations;
    std::map<std::string, Graphics_Object *> graphics_objects;
    // A vector of inputs, accessed for any processing operations that depend
    // on the output of other modules
    std::vector<Parameter> inputs;
    // Output buffer
    std::vector<float> out;

    // Constructor and destructor
    Module(ModuleType);
    virtual ~Module();

    // Virtual member functions
    //   Process audio for the output buffer
    //   Each derived module class must define its own signal processing
    //   capabilities
    virtual void process() = 0;
    //   Handle user interactions with the graphics objects that make up the
    //   visual representation of this module, return true if any action was
    //   taken, false otherwise
    virtual bool handle_event(Graphics_Object *);
    //   Output the module's unique information as text
    //   Each derived module class must define its own function for outputting
    //   a text representation of itself
    //   This function is used to save patches as text files
    virtual std::string get_unique_text_representation() = 0;
    //   Calculate the locations of graphics objects unique to this module type
    //   This function should have a defualt implementation, but should also
    //   be possible to override
    virtual void calculate_unique_graphics_object_locations();
    //   Initialize the graphics objects unique to this module type
    //   This function should have a default implementation, but should also
    //   be possible to override
    virtual void initialize_unique_graphics_objects();

    // Member functions
    //   Process all modules that this module depends upon
    void process_dependencies();
    //   Grab samples from index i in all input buffers, store them as
    //   individual floats
    void update_input_vals(int);
    //   Initialize all graphics objects in this module
    void initialize_graphics_objects();
    //   Calculate the locations of all graphics objects in this module
    void calculate_graphics_object_locations();
    //   Update the locations of all graphics objects in this module
    void update_graphics_object_locations();
    //   Set a parameter to a certain value
    void set(float, int);
    //   Set a parameter to be updated by another module's output
    void set(Module *, int);
    //   Cancel input for a certain parameter
    void cancel_input(int);
    //   Return module name
    std::string get_name();
    //   Return module short name
    std::string get_short_name();
    //   Output the module as text
    //   This function is used to save patches as text files
    std::string get_text_representation();
    //   Make the input text boxes in this module adopt the colors of whatever
    //   modules are outputting to the inputs associated with them
    void adopt_input_colors();
    //   Do what is necessary to become the module outputting to an input on 
    //   another module
    void module_selected();
    //   Render this module to the window
    void render();
    //   Handle a click
    void clicked();
};

#endif

